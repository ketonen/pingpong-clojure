(ns pingpong-clojure.core
  (:require [reagent.core :as reagent :refer [atom]]))

(enable-console-print!)

(println "This text is printed from src/pingpong-clojure/core.cljs. Go ahead and edit it and see reloading in action.")

;; define your app data so that it doesn't get over-written on reload

(defonce app-state (atom {:ball {:x 50 :y 50}}))
(defonce state* (atom {}))

(defn hello-world [state]
  [:svg {:style {:width "100%" :height "100%" :position "absolute"}}
   [:circle {:style {:fill "black"}
             :cx (str (get-in @state [:ball :x]) "px")
             :cy (str (get-in @state [:ball :y]) "px")
             :r "50"}]])

(reagent/render-component [hello-world app-state]
                          (. js/document (getElementById "app")))

(defn move-ball [] (do
                   (swap! app-state update-in [:ball :y] inc)
                   (swap! app-state update-in [:ball :x] inc)))

(defn handler [] (move-ball))

(swap! state* assoc :polling-id (js/setInterval handler 100))

(defn on-js-reload []
  (js/clearInterval (:polling-id @state*))
  ;; optionally touch your app-state to force rerendering depending on
  ;; your application
  ;; (swap! app-state update-in [:__figwheel_counter] inc)
  )

